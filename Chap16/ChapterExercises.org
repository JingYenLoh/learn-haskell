#+TITLE: Chapter Exercises

* Determine if Valid Functor
#+BEGIN_SRC haskell
data Bool = False
          | True
#+END_SRC
Valid Functor cannot be written, not HKT.

#+BEGIN_SRC haskell
data BoolAndSomethingElse a = False' a
                            | True' a
#+END_SRC
Valid Functor can be written.

#+BEGIN_SRC haskell
data BoolAndMaybeSomethingElse a = Falsish
                                 | Truish a
#+END_SRC
Valid Functor can be written.

#+BEGIN_SRC haskell
newtype Mu f = InF { outF :: f (Mu f) }
#+END_SRC
Valid Functor can be written.

#+BEGIN_SRC haskell
import GHC.Arr

data D =
  D (Array Word Word) Int Int
#+END_SRC
Valid Functor cannot be written, not HKT.

* Rearrange type constructor argument
#+BEGIN_SRC haskell
data Sum b a = First a
             | Second b

instance Functor (Sum a) where
  fmap f (First a) = First (f a)
  fmap _ (Second b) = Second b
#+END_SRC

#+BEGIN_SRC haskell
data Company a c b = DeepBlue a c
                   | Something b

instance Functor (Company e e') where
  fmap f (Something b) = Something (f b)
  fmap _ (DeepBlue a c) = DeepBlue a c
#+END_SRC

#+BEGIN_SRC haskell
data More b a = L a b a
              | R b a b
              deriving (Eq, Show)

instance Functor (More x) where
  fmap f (L a b a') = L (f a) b (f a')
  fmap f (R b a b') = R b (f a) b'
#+END_SRC

* Write Functor instances
#+BEGIN_SRC haskell
data Quant a b = Finance
               | Desk a
               | Bloor b

instance Functor (Quant a) where
  fmap f (Bloor b) = Bloor (f b)
  fmap _ (Desk a) = Desk a
  fmap _ _ = Finance
#+END_SRC

#+BEGIN_SRC haskell
data K a b = K a

instance Functor (K a) where
  fmap _ (K a) = K a
#+END_SRC

#+BEGIN_SRC haskell
newtype Flip f a b = Flip (f b a)
                   deriving (Eq, Show)

newtype K a b = K a

instance Functor (Flip K a) where
  fmap f (Flip (K b)) = Flip (K $ f b)
#+END_SRC

#+BEGIN_SRC haskell
data EvilGoateeConst a b = GoatyConst b

instance Functor (EvilGoateeConst a) where
  fmap f (GoatyConst b) = GoatyConst (f b)
#+END_SRC

#+BEGIN_SRC haskell
data LiftItOut f a = LiftItOut (f a)

instance Functor f => Functor (LiftItOut f) where
  fmap f (LiftItOut fa) = LiftItOut (fmap f fa)
#+END_SRC

#+BEGIN_SRC haskell
data Parappa f g a = DaWrappa (f a) (g a)

instance (Functor f, Functor g) =>
  Functor (Parappa f g) where
  fmap f (DaWrappa fa ga) = DaWrappa (f <$> fa) (f <$> ga)
#+END_SRC

#+BEGIN_SRC haskell
data IgnoreOne f g a b =
  IgnoringSomething (f a) (g b)

instance Functor g => Functor (IgnoreOne f g a) where
  fmap f (IgnoringSomething fa gb) =
    IgnoringSomething fa (f <$> gb)
#+END_SRC

#+BEGIN_SRC haskell
data Notorious g o a t =
  Notorious (g o) (g a) (g t)

instance Functor g => Functor (Notorious g o a) where
  fmap f (Notorious go ga gt) = Notorious go ga (f <$> gt)
#+END_SRC

#+BEGIN_SRC haskell
data List a = Nil
            | Cons a (List a)

instance Functor List where
  fmap _ Nil = Nil
  fmap f (Cons a xs) = Cons (f a) (fmap f xs)
#+END_SRC

#+BEGIN_SRC haskell
data GoatLord a = NoGoat
                | OneGoat a
                | MoreGoats (GoatLord a)
                            (GoatLord a)
                            (GoatLord a)

instance Functor GoatLord where
  fmap _ NoGoat = NoGoat
  fmap f (OneGoat a) = OneGoat (f a)
  fmap f (MoreGoats x y z) =
    MoreGoats (f <$> x) (f <$> y) (f <$> z)
#+END_SRC

#+BEGIN_SRC haskell
data TalkToMe a = Halt
                | Print String a
                | Read (String -> a)

instance Functor TalkToMe where
  fmap _ Halt = Halt
  fmap f (Print xs a) = Print xs (f a)
  fmap f (Read f1) = Read (fmap f f1)
#+END_SRC
