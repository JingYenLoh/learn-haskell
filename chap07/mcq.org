* Chapter Exercises
  :PROPERTIES:
  :CUSTOM_ID: chapter-exercises
  :END:

** Multiple Choice
   :PROPERTIES:
   :CUSTOM_ID: multiple-choice
   :END:

1. A polymorphic function\\

1) changes things into sheep when invoked\\
2) has multiple arguments\\
3) has a concrete type\\
4) may resolve to values of different types, depending on inputs\\
   My answer: d

2. Two functions named =f= and =g= have types =Char -> String= and
   =String -> [String]= respectively. The composed function =g . f= has
   the type\\

1) =Char -> String=\\
2) =Char -> [String]=\\
3) =[[String]]=\\
4) =Char -> String -> [String]=\\
   My answer: d

3. A function =f= has the type =Ord a => a -> a -> Bool= and we apply it
   to one numeric value. What is the type now?\\

1) =Ord a => a -> Bool=\\
2) =Num -> Num -> Bool=\\
3) =Ord a => a -> a -> Integer=\\
4) =(Ord a, Num a) => a -> Bool=\\
   My answer: d

4. A function with the type =(a -> b) -> c=\\

1) requires values of three different types\\
2) is a higher-order function\\
3) must take a tuple as its first argument\\
4) has its parameters in alphabetical order\\
   My answer: b

5. Given the following definition of =f=, what is the type of
   =f True=?\\

#+BEGIN_SRC haskell
    f :: a -> a
    f x = x
#+END_SRC

1) =f True :: Bool=\\
2) =f True :: String=\\
3) =f True :: Bool -> Bool=\\
4) =f True :: a=\\
   My answer: a

** Let's write code
1. The following function returns the tens digit of an integral argument.

#+BEGIN_SRC haskell
tensDigit :: Integral a => a -> a
tensDigit x = d
  where xLast = x `div` 10
        d     = xLast `mod` 10
#+END_SRC

a) First, rewrite it using ~divMod~.
#+BEGIN_SRC haskell
tensDigit :: Integral a => a -> a
#+END_SRC

2. Implement the function of the type ~a -> a -> Bool -> a~ once each using a case expression and once
with a guard.

#+BEGIN_SRC haskell
foldBool :: a -> a -> Bool -> a
foldBool = error "Error: Need to implement foldBool!"

foldBool1 :: a -> a -> Bool -> a
foldBool1 x y bool =
  case bool of
    True  -> x
    False -> y

foldBool2 :: a -> a -> Bool -> a
foldBool2 x y bool
  | bool == True  = x
  | bool == False = y

foldBool3 :: a -> a -> Bool -> a
foldBool3 x _ False = x
foldBool3 _ y True  = y
#+END_SRC

3. Fill in the definition.
#+BEGIN_SRC haskell
g :: (a -> b) -> (a, c) -> (b, c)
g f (a, b) = (f a, b)
#+END_SRC
