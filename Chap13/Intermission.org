#+TITLE: Check your understanding

#+BEGIN_SRC haskell
import qualified Control.Concurrent        as CC
import qualified Control.Concurrent.MVar   as MV
import qualified Data.ByteString.Char8     as B
import qualified Data.Locator              as DL
import qualified Data.Time.Clock.POSIX     as PSX
import qualified Filesystem                as FS
import qualified Filesystem.Path.CurrentOS as FPC
import qualified Network.Info              as NI

import qualified Safe
import           Control.Exception (mask, try)
import           Control.Monad (forever, when)
import           Data.Bits
import           Data.Bits.Bitwise (fromListBE)
import           Data.List.Split (chunksOf)
import           Database.Blacktip.Types
import           System.IO.Unsafe (unsafePerformIO)
#+END_SRC

 1. ~forever, when~
 2. ~Data.Bits, Database.Blacktip.Types~
 3. something

#+BEGIN_SRC haskell
writeTimeStamp :: MV.MVar ServerState
               -> FPC.FilePath
               -> IO CC.ThreadId
writeTimeStamp s path = do
  CC.forkIO go
  where go = forever $ do
          ss <- MV.readMVar s
          mask $ \_ -> do
            FS.writeFile path
            (B.pack (show (ssTime ss)))
          -- sleep for 1 second
          CC.threadDelay 1000000
#+END_SRC
 1. ~Control.Concurrent.MVar, Filesystem.Path.CurrentOS, Control.Concurrent~
 2. ~Filesystem (writeFile)~ ?
 3. ~Control.Monad~
