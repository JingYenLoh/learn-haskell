#+TITLE: Chapter Exercises

#+BEGIN_SRC haskell
newtype List a = List a

instance Functor List where
  fmap f (List a) = List $ f a

instance Applicative List where
  pure = List
  (List f) <*> (List a) = List (f a)
#+END_SRC

#+BEGIN_SRC haskell
newtype EyeOh a = IO a

instance Functor EyeOh where
  fmap f (IO a) = IO (f a)

instance Applicative EyeOh where
  pure a = IO a
  (IO a) <*> (IO b) = IO (a b)
#+END_SRC

#+BEGIN_SRC haskell
data Two a b = Two a b

instance Functor (Two a) where
  fmap f (Two a b) = Two a (f b)

instance Monoid a => Applicative (Two a) where
  pure = Two mempty
  (Two a b) <*> (Two a1 b1) = Two (a <> a1) (b b1)
#+END_SRC

#+BEGIN_SRC haskell
-- TODO: (->) e
#+END_SRC
