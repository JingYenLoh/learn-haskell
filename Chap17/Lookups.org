#+TITLE: Exercises: Lookups

#+BEGIN_SRC haskell
added :: Maybe Integer
added =
  pure (+3) <*> (lookup 3 $ zip [1, 2, 3] [4, 5, 6])
#+END_SRC

#+BEGIN_SRC haskell
y :: Maybe Integer
y  = lookup 3 $ zip [1, 2, 3] [4, 5, 6]

z :: Maybe Integer
z = lookup 3 $ zip [1, 2, 3] [4, 5, 6]

tupled :: Maybe (Integer, Integer)
tupled = (,) <$> y <*> z
#+END_SRC

#+BEGIN_SRC haskell
import Data.List (elemIndex)

x :: Maybe Int
x = elemIndex 3 [1, 2, 3, 4, 5]

y :: Maybe Int
y = elemIndex 4 [1, 2, 3, 4, 5]

max' :: Int -> Int -> Int
max' = max

maxed :: Maybe Int
maxed = max' <$> x <*> y
#+END_SRC

#+BEGIN_SRC haskell
xs = [1, 2, 3]
ys = [4, 5, 6]

x :: Maybe Integer
x = lookup 3 $ zip xs ys

y :: Maybe Integer
y = lookup 2 $ zip xs ys

summed :: Maybe Integer
summed = fmap sum $ (,) <$> x <*> y
#+END_SRC
