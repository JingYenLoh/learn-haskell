#+TITLE: Chapter Exercises

#+BEGIN_SRC haskell
data Quantum =
    Yes
  | No
  | Both
  deriving (Eq, Show)

-- convert :: Quantum -> Bool

-- convert1 _ = True

-- convert2 _ = False

-- convert3 Yes = True
-- convert3 No = True
-- convert3 Both = False

-- convert4 Yes = False
-- convert4 No = False
-- convert4 Both = True

-- convert5 Yes = True
-- convert5 No = False
-- convert5 Both = True

-- convert6 Yes = False
-- convert6 No = True
-- convert6 Both = False

-- convert7 Yes = False
-- convert7 No = True
-- convert7 Both = True

-- convert8 Yes = True
-- convert8 No = False
-- convert8 Both = False
#+END_SRC

* Multiple Choice
Given the following datatype:
#+BEGIN_SRC haskell
data Weekday =
    Monday
  | Tuesday
  | Wednesday
  | Thursday
  | Friday
#+END_SRC
we can say: ~Weekday~ is a type with 5 data constructors

and with the same datatype definition in mind, what is the type of the following
function, ~f~?
#+BEGIN_SRC haskell
f Friday = "Miller Time"
#+END_SRC
~f :: Weekday -> String~

Types defined with the ~data~ keyword must begin with a capital letter.

The function ~g xs = xs !! (length xs - 1)~ delivers the final element of ~xs~

* Ciphers
Refer to ~Chap09/Cipher.hs~.

* As-patterns
#+BEGIN_SRC haskell
isSubseqOf :: (Eq a) => [a] -> [a] -> Bool
isSubseqOf [] _ = True
isSubseqOf _ [] = False
isSubseqOf seq@(x:xs) (y:ys) = isSubseqOf (if x == y then xs else seq) ys
#+END_SRC

#+BEGIN_SRC haskell
capitalizeWords :: String -> [(String, String)]
capitalizeWords xs = map (\w@(c:cs) -> (w, toUpper c : cs)) $ words xs
#+END_SRC

* Language exercises
Write a function that capitalizes a word.
#+BEGIN_SRC haskell
capitalizeWord :: String -> String
capitalizeWord ""  = ""
capitalizeWord (x:xs) = toUpper x : xs
#+END_SRC

Write a function that capitalizes sentences in a paragraph.
#+BEGIN_SRC haskell
capitalizeParagraph :: String -> String
capitalizeParagraph = undefined
#+END_SRC
