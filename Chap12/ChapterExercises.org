#+TITLE: Chapter Exercises

* Determine the kinds

Given
#+BEGIN_SRC haskell
id :: a -> a
#+END_SRC
The kind of ~a~ is ~*~.

Given
#+BEGIN_SRC haskell
r :: a -> f a
#+END_SRC
The kind of ~a~ is ~*~.
The kind of ~f~ is ~* -> *~.

* String processing
#+BEGIN_SRC haskell
import Data.List

notThe :: String -> Maybe String
notThe str = if str /= "the"
  then Just str
  else Nothing

replaceThe :: String -> String
replaceThe = unwords . fmap f . words
  where f xs = case notThe xs of
          (Just str) -> str
          Nothing    -> "a"
#+END_SRC

#+BEGIN_SRC haskell
countTheBeforeVowel :: String -> Integer
countTheBeforeVowel = undefined
#+END_SRC

#+BEGIN_SRC haskell
isVowel :: Char -> Bool
isVowel = (`elem` "aeiou")

countVowels :: String -> Integer
countVowels str = go str 0 where
  go "" acc = acc
  go (x:xs) acc = if isVowel x then go xs (acc + 1) else go xs acc
#+END_SRC

* Validate the word
A little messy but brain isn't really functioning now.
#+BEGIN_SRC haskell
newtype Word' =
  Word' String
  deriving (Eq, Show)

vowels = "aeiou"

mkWord :: String -> Maybe Word'
mkWord str = go str 0 0 where
  go ""     v c = if v > c then Nothing else (Just $ Word' str)
  go (x:xs) v c = if x `elem` vowels
                  then go xs (v + 1) c
                  else go xs v (c + 1)
#+END_SRC

* It's only Natural
#+BEGIN_SRC haskell
-- As natural as any
-- competitive bodybuilder
data Nat =
    Zero
  | Succ Nat
  deriving (Eq, Show)

natToInteger :: Nat -> Integer
natToInteger n = go n 0 where
  go Zero acc = acc
  go (Succ x) acc = go x (acc + 1)


integerToNat :: Integer -> Maybe Nat
integerToNat i
  | i < 0     = Nothing
  | otherwise = go i Zero where
      go 0 (acc) = Just acc
      go n (acc) = go (n - 1) (Succ acc)
#+END_SRC

* Small library for Maybe
#+BEGIN_SRC haskell
isJust :: Maybe a -> Bool
isJust Nothing  = False
isJust _        = True

isNothing :: Maybe a -> Bool
isNothing Nothing  = True
isNothing _        = False
#+END_SRC

#+BEGIN_SRC haskell
mayybee :: b -> (a -> b) -> Maybe a -> b
mayybee = undefined
#+END_SRC
